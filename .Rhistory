install.packages("swirl")
library(swirl)
install.packages("codetools")
install.packages("swirl")
install.packages("testthat")
install.packages("swirl")
install.packages("swirl", dependencies=TRUE)
install.packages("evaluate")
install.packages("swirl", dependencies=TRUE)
install.packages("testthat")
library(swirl)
install.packages("swirl")
install.packages("swirl", dependencies=TRUE)
library(testthat)
library(Testthat)
install.packages("Testthat")
install.packages("swirl", dependencies=TRUE)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
C(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Luca")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA) and
| assign it to a variable x.
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matris <- my_vector
my_matrix <- my_vector
?matrix
my_matrix2 <-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c( "Bill", "Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flags_color)
head(flags_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5,
| 5, 5, 6, 6))
unique(c(3, 4, 5,5, 5, 6, 6))
unique_vals <-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
dim(flags)
summary(flags)
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(pH_Min)
head(plants)
head(plants,10)
head(tail,15)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),replacement = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm[]
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,100))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t2)
weekdays(t1)
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
quit()
setwd("~/coursera/R_programming/assignment2/ProgrammingAssignment2")
matrix(4,2,2)
a <- matrix(4,2,2)
solve(a)
a <- matrix(1,2,2,1,2,2)
a <- matrix(c(2,1),2,2)
a
a <- matrix(c(2,1,1,2),2,2)
a
solve(a)
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/makevector.R')
a <- 1:10
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachemean.R')
makevector(a)
makeVector(a)
cachemean(a)
a
a$getmean
m
mean
cachemean(mean)
cachemean(mean,a)
cachemean(a,mean)
a <- makeVector(c(1,2,3,4))
a
a$getmean
cachemean(a)
a
a = 1:10
a
class(a)
a = c(1:10)
class(a)
makevector(a)
makeVector(a)
a
a = 1:10
a <- makevector(a)
a <- makeVector(a)
cachemean(a)
a
a <- makeVector(c(1,2,3,4))
cachemean(a)
a = 1:10
a <- makeVector(a)
cachemean(a)
a = c(1:10)
a <- makeVector(a)
cachemean(a)
a <- makeVector(1:10)
cachemean(a)
a <- matrix(c(2,1,1,2),2,2)
a
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix_draft.R')
makeCacheMatrix(matrix(c(2,1,1,2),2,2))
X <- makeCacheMatrix(matrix(c(2,1,1,2),2,2))
cacheSolve(X)
Y <- matrix(c(3,1,3,1),2,2)
Y
cacheSolve(Y)
cacheSolve(matrix(c(3,1,3,1),2,2))
cacheSolve(X)
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix_draft.R')
cacheSolve(Y)
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix_draft.R')
cacheSolve(Y)
cacheSolve(matrix(c(3,1,3,1),2,2))
dir
dir()
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/makevector.R')
cachemean(1:5)
cachemean(list(1:5)
)
list(1:5)
makeVector(1:5)
a <- makeVector(1:5)
cachemean(a)
a
class(a)
b <- makeVector(1:5)
cachemean(b)
cachemean(b)
X <- makeCacheMatrix(matrix(c(2,1,1,2),2,2))
cacheSolve(X)
cacheSolve(X)
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/makevector.R')
class(X)
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix_draft.R')
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix_draft.R')
source('~/coursera/R_programming/assignment2/ProgrammingAssignment2/cachematrix.R')
